crystal_doc_search_index_callback({"repository_name":"assert","body":"# Deprecated in favor of Athena's [Validator](https://github.com/athena-framework/validator) component.\n\n# Assert\n[![Latest release](https://img.shields.io/github/release/Blacksmoke16/assert.svg?style=flat-square)](https://github.com/Blacksmoke16/assert/releases)\n\nExtensible annotation based object validation library based on [Symfony Validation Constraint Annotations](https://symfony.com/doc/current/reference/constraints.html).\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  assert:\n    github: blacksmoke16/assert\n```\n\n## Documentation\n\nEverything is documented in the [API Docs](https://blacksmoke16.github.io/assert/Assert.html).\n\n## Contributing\n\n1. Fork it (<https://github.com/Blacksmoke16/assert/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Blacksmoke16](https://github.com/Blacksmoke16) Blacksmoke16 - creator, maintainer\n","program":{"html_id":"assert/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"assert","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"assert/Assert","path":"Assert.html","kind":"module","full_name":"Assert","name":"Assert","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/assert.cr","line_number":86,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assert.cr#L86"},{"filename":"src/assertion.cr","line_number":3,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L3"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Annotation based object validation library.\n\nSee the `Assert::Assertions` namespace for the full assertion list as well as each assertion class for more detailed information/examples.\n\nSee `Assert::Assertions::Assertion` for common/high level assertion usage documentation.\n\n### Example Usage\n\n`Assert` supports both object based validations via annotations as well as ad hoc value validations via class methods.\n#### Object Validation\n\n```\nrequire \"assert\"\n\nclass User\n  include Assert\n\n  def initialize(@name : String, @age : Int32?, @email : String, @password : String); end\n\n  # Assert their name is not blank\n  @[Assert::NotBlank]\n  property name : String\n\n  # Asserts that their age is >= 0 AND not nil\n  @[Assert::NotNil]\n  @[Assert::GreaterThanOrEqual(value: 0)]\n  property age : Int32?\n\n  # Assert their email is not blank AND is a valid format\n  @[Assert::Email(message: \"'%{actual}' is not a proper email\")]\n  @[Assert::NotBlank]\n  property email : String\n\n  # Assert their password is between 7 and 25 characters\n  @[Assert::Size(Range(Int32, Int32), range: 7..25)]\n  property password : String\nend\n\nuser = User.new \"Jim\", 19, \"test@email.com\", \"monkey123\"\n\n# #valid? returns `true` if `self` is valid, otherwise `false`\nuser.valid? # => true\n\nuser.email = \"foobar\"\nuser.password = \"hi\"\n\n# #valid? returns `true` if `self` is valid, otherwise `false`\nuser.valid? # => false\n\n# #validate returns an array of assertions that were not valid\nuser.validate.empty? # => false\n\nbegin\n  # #validate! raises an exception if `self` is not valid\n  user.validate!\nrescue ex : Assert::Exceptions::ValidationError\n  ex.to_s    # => Validation tests failed:  'foobar' is not a proper email, 'password' is too short.  It should have 7 character(s) or more\n  ex.to_json # => {\"code\":400,\"message\":\"Validation tests failed\",\"errors\":[\"'foobar' is not a proper email\",\"'password' is too short.  It should have 7 character(s) or more\"]}\nend\n```\n\n#### Ad Hoc Validation\n```\n# Each assertion automatically defines a shortcut class method for ad hoc validations.\nAssert.not_blank \"foo\" # => true\nAssert.not_blank \"\"    # => false\n\nbegin\n  # The bang version will raise if the value is invalid.\n  Assert.not_blank! \"   \"\nrescue ex\n  ex.to_s # => Validation tests failed: 'actual' should not be blank\nend\n\nbegin\n  # Optional arguments can be used just like the annotation versions.\n  Assert.equal_to! 15, 20, message: \"%{actual} does not equal %{value}\"\nrescue ex\n  ex.to_s # => Validation tests failed: 15 does not equal 20\nend\n```","summary":"<p>Annotation based object validation library.</p>","class_methods":[{"id":"choice(actual:PropertyType,choices:ChoicesType,min_matches:Int32?=nil,max_matches:Int32?=nil,min_message:String?=nil,max_message:String?=nil,multiple_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,ChoicesType-class-method","html_id":"choice(actual:PropertyType,choices:ChoicesType,min_matches:Int32?=nil,max_matches:Int32?=nil,min_message:String?=nil,max_message:String?=nil,multiple_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,ChoicesType-class-method","name":"choice","doc":"`Assert::Assertions::Choice` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/Choice.html\">Assert::Assertions::Choice</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"choices","doc":null,"default_value":"","external_name":"choices","restriction":"ChoicesType"},{"name":"min_matches","doc":null,"default_value":"nil","external_name":"min_matches","restriction":"Int32 | ::Nil"},{"name":"max_matches","doc":null,"default_value":"nil","external_name":"max_matches","restriction":"Int32 | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"multiple_message","doc":null,"default_value":"nil","external_name":"multiple_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, choices : ChoicesType, min_matches : Int32? = <span class=\"n\">nil</span>, max_matches : Int32? = <span class=\"n\">nil</span>, min_message : String? = <span class=\"n\">nil</span>, max_message : String? = <span class=\"n\">nil</span>, multiple_message : String? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType, ChoicesType","source_link":null,"def":{"name":"choice","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"choices","doc":null,"default_value":"","external_name":"choices","restriction":"ChoicesType"},{"name":"min_matches","doc":null,"default_value":"nil","external_name":"min_matches","restriction":"Int32 | ::Nil"},{"name":"max_matches","doc":null,"default_value":"nil","external_name":"max_matches","restriction":"Int32 | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"multiple_message","doc":null,"default_value":"nil","external_name":"multiple_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Choice(PropertyType, ChoicesType).new({{ @def.args.first.name.stringify }}, actual, choices, min_matches, max_matches, min_message, max_message, multiple_message, message, groups)\nassertion.valid?\n"}},{"id":"choice!(actual:PropertyType,choices:ChoicesType,min_matches:Int32?=nil,max_matches:Int32?=nil,min_message:String?=nil,max_message:String?=nil,multiple_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,ChoicesType-class-method","html_id":"choice!(actual:PropertyType,choices:ChoicesType,min_matches:Int32?=nil,max_matches:Int32?=nil,min_message:String?=nil,max_message:String?=nil,multiple_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,ChoicesType-class-method","name":"choice!","doc":"`Assert::Assertions::Choice` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/Choice.html\">Assert::Assertions::Choice</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"choices","doc":null,"default_value":"","external_name":"choices","restriction":"ChoicesType"},{"name":"min_matches","doc":null,"default_value":"nil","external_name":"min_matches","restriction":"Int32 | ::Nil"},{"name":"max_matches","doc":null,"default_value":"nil","external_name":"max_matches","restriction":"Int32 | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"multiple_message","doc":null,"default_value":"nil","external_name":"multiple_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, choices : ChoicesType, min_matches : Int32? = <span class=\"n\">nil</span>, max_matches : Int32? = <span class=\"n\">nil</span>, min_message : String? = <span class=\"n\">nil</span>, max_message : String? = <span class=\"n\">nil</span>, multiple_message : String? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType, ChoicesType","source_link":null,"def":{"name":"choice!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"choices","doc":null,"default_value":"","external_name":"choices","restriction":"ChoicesType"},{"name":"min_matches","doc":null,"default_value":"nil","external_name":"min_matches","restriction":"Int32 | ::Nil"},{"name":"max_matches","doc":null,"default_value":"nil","external_name":"max_matches","restriction":"Int32 | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"multiple_message","doc":null,"default_value":"nil","external_name":"multiple_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Choice(PropertyType, ChoicesType).new({{ @def.args.first.name.stringify }}, actual, choices, min_matches, max_matches, min_message, max_message, multiple_message, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"divisible_by(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"divisible_by(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"divisible_by","doc":"`Assert::Assertions::DivisibleBy` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/DivisibleBy.html\">Assert::Assertions::DivisibleBy</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"divisible_by","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::DivisibleBy(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid?\n"}},{"id":"divisible_by!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"divisible_by!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"divisible_by!","doc":"`Assert::Assertions::DivisibleBy` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/DivisibleBy.html\">Assert::Assertions::DivisibleBy</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"divisible_by!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::DivisibleBy(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"email(actual:Union(String,Nil),mode:EmailValidationMode=EmailValidationMode::Loose,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"email(actual:Union(String,Nil),mode:EmailValidationMode=EmailValidationMode::Loose,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"email","doc":"`Assert::Assertions::Email` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/Email.html\">Assert::Assertions::Email</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"mode","doc":null,"default_value":"EmailValidationMode::Loose","external_name":"mode","restriction":"EmailValidationMode"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), mode : EmailValidationMode = <span class=\"t\">EmailValidationMode</span><span class=\"t\">::</span><span class=\"t\">Loose</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"email","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"mode","doc":null,"default_value":"EmailValidationMode::Loose","external_name":"mode","restriction":"EmailValidationMode"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Email(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, mode, normalizer, message, groups)\nassertion.valid?\n"}},{"id":"email!(actual:Union(String,Nil),mode:EmailValidationMode=EmailValidationMode::Loose,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"email!(actual:Union(String,Nil),mode:EmailValidationMode=EmailValidationMode::Loose,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"email!","doc":"`Assert::Assertions::Email` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/Email.html\">Assert::Assertions::Email</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"mode","doc":null,"default_value":"EmailValidationMode::Loose","external_name":"mode","restriction":"EmailValidationMode"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), mode : EmailValidationMode = <span class=\"t\">EmailValidationMode</span><span class=\"t\">::</span><span class=\"t\">Loose</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"email!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"mode","doc":null,"default_value":"EmailValidationMode::Loose","external_name":"mode","restriction":"EmailValidationMode"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Email(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, mode, normalizer, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"equal_to(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"equal_to(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"equal_to","doc":"`Assert::Assertions::EqualTo` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/EqualTo.html\">Assert::Assertions::EqualTo</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"equal_to","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::EqualTo(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid?\n"}},{"id":"equal_to!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"equal_to!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"equal_to!","doc":"`Assert::Assertions::EqualTo` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/EqualTo.html\">Assert::Assertions::EqualTo</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"equal_to!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::EqualTo(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"greater_than(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"greater_than(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"greater_than","doc":"`Assert::Assertions::GreaterThan` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/GreaterThan.html\">Assert::Assertions::GreaterThan</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"greater_than","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::GreaterThan(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid?\n"}},{"id":"greater_than!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"greater_than!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"greater_than!","doc":"`Assert::Assertions::GreaterThan` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/GreaterThan.html\">Assert::Assertions::GreaterThan</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"greater_than!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::GreaterThan(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"greater_than_or_equal(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"greater_than_or_equal(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"greater_than_or_equal","doc":"`Assert::Assertions::GreaterThanOrEqual` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/GreaterThanOrEqual.html\">Assert::Assertions::GreaterThanOrEqual</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"greater_than_or_equal","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::GreaterThanOrEqual(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid?\n"}},{"id":"greater_than_or_equal!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"greater_than_or_equal!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"greater_than_or_equal!","doc":"`Assert::Assertions::GreaterThanOrEqual` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/GreaterThanOrEqual.html\">Assert::Assertions::GreaterThanOrEqual</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"greater_than_or_equal!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::GreaterThanOrEqual(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"in_range(actual:PropertyType,range:RangeType,not_in_range_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,RangeType-class-method","html_id":"in_range(actual:PropertyType,range:RangeType,not_in_range_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,RangeType-class-method","name":"in_range","doc":"`Assert::Assertions::InRange` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/InRange.html\">Assert::Assertions::InRange</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"not_in_range_message","doc":null,"default_value":"nil","external_name":"not_in_range_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, range : RangeType, not_in_range_message : String? = <span class=\"n\">nil</span>, min_message : String? = <span class=\"n\">nil</span>, max_message : String? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType, RangeType","source_link":null,"def":{"name":"in_range","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"not_in_range_message","doc":null,"default_value":"nil","external_name":"not_in_range_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::InRange(PropertyType, RangeType).new({{ @def.args.first.name.stringify }}, actual, range, not_in_range_message, min_message, max_message, message, groups)\nassertion.valid?\n"}},{"id":"in_range!(actual:PropertyType,range:RangeType,not_in_range_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,RangeType-class-method","html_id":"in_range!(actual:PropertyType,range:RangeType,not_in_range_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,RangeType-class-method","name":"in_range!","doc":"`Assert::Assertions::InRange` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/InRange.html\">Assert::Assertions::InRange</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"not_in_range_message","doc":null,"default_value":"nil","external_name":"not_in_range_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, range : RangeType, not_in_range_message : String? = <span class=\"n\">nil</span>, min_message : String? = <span class=\"n\">nil</span>, max_message : String? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType, RangeType","source_link":null,"def":{"name":"in_range!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"not_in_range_message","doc":null,"default_value":"nil","external_name":"not_in_range_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::InRange(PropertyType, RangeType).new({{ @def.args.first.name.stringify }}, actual, range, not_in_range_message, min_message, max_message, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"ip(actual:Union(String,Nil),version:IPVersion=IPVersion::IPV4,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"ip(actual:Union(String,Nil),version:IPVersion=IPVersion::IPV4,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"ip","doc":"`Assert::Assertions::Ip` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/Ip.html\">Assert::Assertions::Ip</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"version","doc":null,"default_value":"IPVersion::IPV4","external_name":"version","restriction":"IPVersion"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), version : IPVersion = <span class=\"t\">IPVersion</span><span class=\"t\">::</span><span class=\"t\">IPV4</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"ip","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"version","doc":null,"default_value":"IPVersion::IPV4","external_name":"version","restriction":"IPVersion"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Ip(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, version, normalizer, message, groups)\nassertion.valid?\n"}},{"id":"ip!(actual:Union(String,Nil),version:IPVersion=IPVersion::IPV4,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"ip!(actual:Union(String,Nil),version:IPVersion=IPVersion::IPV4,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"ip!","doc":"`Assert::Assertions::Ip` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/Ip.html\">Assert::Assertions::Ip</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"version","doc":null,"default_value":"IPVersion::IPV4","external_name":"version","restriction":"IPVersion"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), version : IPVersion = <span class=\"t\">IPVersion</span><span class=\"t\">::</span><span class=\"t\">IPV4</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"ip!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"version","doc":null,"default_value":"IPVersion::IPV4","external_name":"version","restriction":"IPVersion"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Ip(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, version, normalizer, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"is_blank(actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"is_blank(actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"is_blank","doc":"`Assert::Assertions::IsBlank` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/IsBlank.html\">Assert::Assertions::IsBlank</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"is_blank","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::IsBlank(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, normalizer, message, groups)\nassertion.valid?\n"}},{"id":"is_blank!(actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"is_blank!(actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"is_blank!","doc":"`Assert::Assertions::IsBlank` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/IsBlank.html\">Assert::Assertions::IsBlank</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"is_blank!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::IsBlank(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, normalizer, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"is_false(actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"is_false(actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"is_false","doc":"`Assert::Assertions::IsFalse` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/IsFalse.html\">Assert::Assertions::IsFalse</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(Bool, Nil), message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"is_false","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::IsFalse(::Union(Bool, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid?\n"}},{"id":"is_false!(actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"is_false!(actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"is_false!","doc":"`Assert::Assertions::IsFalse` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/IsFalse.html\">Assert::Assertions::IsFalse</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(Bool, Nil), message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"is_false!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::IsFalse(::Union(Bool, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"is_nil(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"is_nil(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"is_nil","doc":"`Assert::Assertions::IsNil` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/IsNil.html\">Assert::Assertions::IsNil</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"is_nil","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::IsNil(PropertyType).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid?\n"}},{"id":"is_nil!(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"is_nil!(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"is_nil!","doc":"`Assert::Assertions::IsNil` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/IsNil.html\">Assert::Assertions::IsNil</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"is_nil!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::IsNil(PropertyType).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"is_true(actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"is_true(actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"is_true","doc":"`Assert::Assertions::IsTrue` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/IsTrue.html\">Assert::Assertions::IsTrue</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(Bool, Nil), message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"is_true","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::IsTrue(::Union(Bool, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid?\n"}},{"id":"is_true!(actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"is_true!(actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"is_true!","doc":"`Assert::Assertions::IsTrue` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/IsTrue.html\">Assert::Assertions::IsTrue</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(Bool, Nil), message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"is_true!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::IsTrue(::Union(Bool, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"less_than(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"less_than(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"less_than","doc":"`Assert::Assertions::LessThan` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/LessThan.html\">Assert::Assertions::LessThan</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"less_than","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::LessThan(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid?\n"}},{"id":"less_than!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"less_than!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"less_than!","doc":"`Assert::Assertions::LessThan` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/LessThan.html\">Assert::Assertions::LessThan</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"less_than!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::LessThan(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"less_than_or_equal(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"less_than_or_equal(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"less_than_or_equal","doc":"`Assert::Assertions::LessThanOrEqual` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/LessThanOrEqual.html\">Assert::Assertions::LessThanOrEqual</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"less_than_or_equal","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::LessThanOrEqual(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid?\n"}},{"id":"less_than_or_equal!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"less_than_or_equal!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"less_than_or_equal!","doc":"`Assert::Assertions::LessThanOrEqual` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/LessThanOrEqual.html\">Assert::Assertions::LessThanOrEqual</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"less_than_or_equal!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::LessThanOrEqual(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"not_blank(actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"not_blank(actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"not_blank","doc":"`Assert::Assertions::NotBlank` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/NotBlank.html\">Assert::Assertions::NotBlank</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"not_blank","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::NotBlank(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, normalizer, message, groups)\nassertion.valid?\n"}},{"id":"not_blank!(actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"not_blank!(actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"not_blank!","doc":"`Assert::Assertions::NotBlank` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/NotBlank.html\">Assert::Assertions::NotBlank</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"not_blank!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::NotBlank(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, normalizer, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"not_equal_to(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"not_equal_to(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"not_equal_to","doc":"`Assert::Assertions::NotEqualTo` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/NotEqualTo.html\">Assert::Assertions::NotEqualTo</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"not_equal_to","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::NotEqualTo(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid?\n"}},{"id":"not_equal_to!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"not_equal_to!(actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"not_equal_to!","doc":"`Assert::Assertions::NotEqualTo` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/NotEqualTo.html\">Assert::Assertions::NotEqualTo</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"not_equal_to!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::NotEqualTo(PropertyType).new({{ @def.args.first.name.stringify }}, actual, value, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"not_nil(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"not_nil(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"not_nil","doc":"`Assert::Assertions::NotNil` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/NotNil.html\">Assert::Assertions::NotNil</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"not_nil","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::NotNil(PropertyType).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid?\n"}},{"id":"not_nil!(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"not_nil!(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"not_nil!","doc":"`Assert::Assertions::NotNil` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/NotNil.html\">Assert::Assertions::NotNil</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"not_nil!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::NotNil(PropertyType).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"regex_match(actual:Union(String,Nil),pattern:Regex,match:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"regex_match(actual:Union(String,Nil),pattern:Regex,match:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"regex_match","doc":"`Assert::Assertions::RegexMatch` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/RegexMatch.html\">Assert::Assertions::RegexMatch</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"},{"name":"match","doc":null,"default_value":"true","external_name":"match","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), pattern : Regex, match : Bool = <span class=\"n\">true</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"regex_match","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"},{"name":"match","doc":null,"default_value":"true","external_name":"match","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::RegexMatch(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, pattern, match, normalizer, message, groups)\nassertion.valid?\n"}},{"id":"regex_match!(actual:Union(String,Nil),pattern:Regex,match:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"regex_match!(actual:Union(String,Nil),pattern:Regex,match:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"regex_match!","doc":"`Assert::Assertions::RegexMatch` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/RegexMatch.html\">Assert::Assertions::RegexMatch</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"},{"name":"match","doc":null,"default_value":"true","external_name":"match","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), pattern : Regex, match : Bool = <span class=\"n\">true</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"regex_match!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"},{"name":"match","doc":null,"default_value":"true","external_name":"match","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::RegexMatch(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, pattern, match, normalizer, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"size(actual:PropertyType,range:RangeType,normalizer:Proc(PropertyType,PropertyType)?=nil,exact_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,RangeType-class-method","html_id":"size(actual:PropertyType,range:RangeType,normalizer:Proc(PropertyType,PropertyType)?=nil,exact_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,RangeType-class-method","name":"size","doc":"`Assert::Assertions::Size` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/Size.html\">Assert::Assertions::Size</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(PropertyType, PropertyType) | ::Nil"},{"name":"exact_message","doc":null,"default_value":"nil","external_name":"exact_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, range : RangeType, normalizer : Proc(PropertyType, PropertyType)? = <span class=\"n\">nil</span>, exact_message : String? = <span class=\"n\">nil</span>, min_message : String? = <span class=\"n\">nil</span>, max_message : String? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType, RangeType","source_link":null,"def":{"name":"size","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(PropertyType, PropertyType) | ::Nil"},{"name":"exact_message","doc":null,"default_value":"nil","external_name":"exact_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Size(PropertyType, RangeType).new({{ @def.args.first.name.stringify }}, actual, range, normalizer, exact_message, min_message, max_message, message, groups)\nassertion.valid?\n"}},{"id":"size!(actual:PropertyType,range:RangeType,normalizer:Proc(PropertyType,PropertyType)?=nil,exact_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,RangeType-class-method","html_id":"size!(actual:PropertyType,range:RangeType,normalizer:Proc(PropertyType,PropertyType)?=nil,exact_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType,RangeType-class-method","name":"size!","doc":"`Assert::Assertions::Size` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/Size.html\">Assert::Assertions::Size</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(PropertyType, PropertyType) | ::Nil"},{"name":"exact_message","doc":null,"default_value":"nil","external_name":"exact_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, range : RangeType, normalizer : Proc(PropertyType, PropertyType)? = <span class=\"n\">nil</span>, exact_message : String? = <span class=\"n\">nil</span>, min_message : String? = <span class=\"n\">nil</span>, max_message : String? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType, RangeType","source_link":null,"def":{"name":"size!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(PropertyType, PropertyType) | ::Nil"},{"name":"exact_message","doc":null,"default_value":"nil","external_name":"exact_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Size(PropertyType, RangeType).new({{ @def.args.first.name.stringify }}, actual, range, normalizer, exact_message, min_message, max_message, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"url(actual:Union(String,Nil),protocols:Array(String)=[&quot;http&quot;,&quot;https&quot;]of::String,relative_protocol:Bool=false,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"url(actual:Union(String,Nil),protocols:Array(String)=[&quot;http&quot;,&quot;https&quot;]of::String,relative_protocol:Bool=false,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"url","doc":"`Assert::Assertions::Url` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/Url.html\">Assert::Assertions::Url</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"protocols","doc":null,"default_value":"[\"http\", \"https\"] of ::String","external_name":"protocols","restriction":"Array(String)"},{"name":"relative_protocol","doc":null,"default_value":"false","external_name":"relative_protocol","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), protocols : Array(String) = [<span class=\"s\">&quot;http&quot;</span>, <span class=\"s\">&quot;https&quot;</span>] <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">String</span>, relative_protocol : Bool = <span class=\"n\">false</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"url","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"protocols","doc":null,"default_value":"[\"http\", \"https\"] of ::String","external_name":"protocols","restriction":"Array(String)"},{"name":"relative_protocol","doc":null,"default_value":"false","external_name":"relative_protocol","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Url(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, protocols, relative_protocol, normalizer, message, groups)\nassertion.valid?\n"}},{"id":"url!(actual:Union(String,Nil),protocols:Array(String)=[&quot;http&quot;,&quot;https&quot;]of::String,relative_protocol:Bool=false,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"url!(actual:Union(String,Nil),protocols:Array(String)=[&quot;http&quot;,&quot;https&quot;]of::String,relative_protocol:Bool=false,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"url!","doc":"`Assert::Assertions::Url` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/Url.html\">Assert::Assertions::Url</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"protocols","doc":null,"default_value":"[\"http\", \"https\"] of ::String","external_name":"protocols","restriction":"Array(String)"},{"name":"relative_protocol","doc":null,"default_value":"false","external_name":"relative_protocol","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), protocols : Array(String) = [<span class=\"s\">&quot;http&quot;</span>, <span class=\"s\">&quot;https&quot;</span>] <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">String</span>, relative_protocol : Bool = <span class=\"n\">false</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"url!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"protocols","doc":null,"default_value":"[\"http\", \"https\"] of ::String","external_name":"protocols","restriction":"Array(String)"},{"name":"relative_protocol","doc":null,"default_value":"false","external_name":"relative_protocol","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Url(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, protocols, relative_protocol, normalizer, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"uuid(actual:Union(String,Nil),versions:Array(UUID::Version)=[UUID::Version::V1,UUID::Version::V2,UUID::Version::V3,UUID::Version::V4,UUID::Version::V5],variants:Array(UUID::Variant)=[UUID::Variant::RFC4122],strict:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"uuid(actual:Union(String,Nil),versions:Array(UUID::Version)=[UUID::Version::V1,UUID::Version::V2,UUID::Version::V3,UUID::Version::V4,UUID::Version::V5],variants:Array(UUID::Variant)=[UUID::Variant::RFC4122],strict:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"uuid","doc":"`Assert::Assertions::Uuid` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/Uuid.html\">Assert::Assertions::Uuid</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"versions","doc":null,"default_value":"[UUID::Version::V1, UUID::Version::V2, UUID::Version::V3, UUID::Version::V4, UUID::Version::V5]","external_name":"versions","restriction":"Array(UUID::Version)"},{"name":"variants","doc":null,"default_value":"[UUID::Variant::RFC4122]","external_name":"variants","restriction":"Array(UUID::Variant)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), versions : Array(UUID::Version) = [<span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V1</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V2</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V3</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V4</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V5</span>], variants : Array(UUID::Variant) = [<span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Variant</span><span class=\"t\">::</span><span class=\"t\">RFC4122</span>], strict : Bool = <span class=\"n\">true</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"uuid","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"versions","doc":null,"default_value":"[UUID::Version::V1, UUID::Version::V2, UUID::Version::V3, UUID::Version::V4, UUID::Version::V5]","external_name":"versions","restriction":"Array(UUID::Version)"},{"name":"variants","doc":null,"default_value":"[UUID::Variant::RFC4122]","external_name":"variants","restriction":"Array(UUID::Variant)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Uuid(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, versions, variants, strict, normalizer, message, groups)\nassertion.valid?\n"}},{"id":"uuid!(actual:Union(String,Nil),versions:Array(UUID::Version)=[UUID::Version::V1,UUID::Version::V2,UUID::Version::V3,UUID::Version::V4,UUID::Version::V5],variants:Array(UUID::Variant)=[UUID::Variant::RFC4122],strict:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"uuid!(actual:Union(String,Nil),versions:Array(UUID::Version)=[UUID::Version::V1,UUID::Version::V2,UUID::Version::V3,UUID::Version::V4,UUID::Version::V5],variants:Array(UUID::Variant)=[UUID::Variant::RFC4122],strict:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"uuid!","doc":"`Assert::Assertions::Uuid` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/Uuid.html\">Assert::Assertions::Uuid</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"versions","doc":null,"default_value":"[UUID::Version::V1, UUID::Version::V2, UUID::Version::V3, UUID::Version::V4, UUID::Version::V5]","external_name":"versions","restriction":"Array(UUID::Version)"},{"name":"variants","doc":null,"default_value":"[UUID::Variant::RFC4122]","external_name":"variants","restriction":"Array(UUID::Variant)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : Union(String, Nil), versions : Array(UUID::Version) = [<span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V1</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V2</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V3</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V4</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V5</span>], variants : Array(UUID::Variant) = [<span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Variant</span><span class=\"t\">::</span><span class=\"t\">RFC4122</span>], strict : Bool = <span class=\"n\">true</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"uuid!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"versions","doc":null,"default_value":"[UUID::Version::V1, UUID::Version::V2, UUID::Version::V3, UUID::Version::V4, UUID::Version::V5]","external_name":"versions","restriction":"Array(UUID::Version)"},{"name":"variants","doc":null,"default_value":"[UUID::Variant::RFC4122]","external_name":"variants","restriction":"Array(UUID::Variant)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Uuid(::Union(String, ::Nil)).new({{ @def.args.first.name.stringify }}, actual, versions, variants, strict, normalizer, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}},{"id":"valid(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"valid(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"valid","doc":"`Assert::Assertions::Valid` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.","summary":"<p><code><a href=\"Assert/Assertions/Valid.html\">Assert::Assertions::Valid</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"valid","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Valid(PropertyType).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid?\n"}},{"id":"valid!(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","html_id":"valid!(actual:PropertyType,message:String?=nil,groups:Array(String)?=nil):BoolforallPropertyType-class-method","name":"valid!","doc":"`Assert::Assertions::Valid` assertion shortcut method.\n\nCan be used for ad hoc validations when applying annotations is not possible.\nRaises an `Assert::Exceptions::ValidationError` if the value is not valid.","summary":"<p><code><a href=\"Assert/Assertions/Valid.html\">Assert::Assertions::Valid</a></code> assertion shortcut method.</p>","abstract":false,"args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(actual : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>) : Bool forall PropertyType","source_link":null,"def":{"name":"valid!","args":[{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"assertion = Assert::Assertions::Valid(PropertyType).new({{ @def.args.first.name.stringify }}, actual, message, groups)\nassertion.valid? || (raise(Assert::Exceptions::ValidationError.new(assertion)))\n"}}],"constructors":[],"instance_methods":[{"id":"valid?(groups:Array(String)=Array(String).new):Bool-instance-method","html_id":"valid?(groups:Array(String)=Array(String).new):Bool-instance-method","name":"valid?","doc":"Returns `true` if `self` is valid, otherwise `false`.\nOptionally only run assertions a part of the provided *groups*.","summary":"<p>Returns <code>true</code> if <code>self</code> is valid, otherwise <code>false</code>.</p>","abstract":false,"args":[{"name":"groups","doc":null,"default_value":"Array(String).new","external_name":"groups","restriction":"Array(String)"}],"args_string":"(groups : Array(String) = <span class=\"t\">Array</span>(<span class=\"t\">String</span>).<span class=\"k\">new</span>) : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assert.cr#L132","def":{"name":"valid?","args":[{"name":"groups","doc":null,"default_value":"Array(String).new","external_name":"groups","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(validate(groups)).empty?"}},{"id":"valid?(*groups:String):Bool-instance-method","html_id":"valid?(*groups:String):Bool-instance-method","name":"valid?","doc":"Returns `true` if `self` is valid, otherwise `false`.\nOptionally only run assertions a part of the provided *groups*.","summary":"<p>Returns <code>true</code> if <code>self</code> is valid, otherwise <code>false</code>.</p>","abstract":false,"args":[{"name":"groups","doc":null,"default_value":"","external_name":"groups","restriction":"String"}],"args_string":"(*groups : String) : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assert.cr#L127","def":{"name":"valid?","args":[{"name":"groups","doc":null,"default_value":"","external_name":"groups","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"valid?(groups.to_a)"}},{"id":"validate(groups:Array(String)=Array(String).new):Array(Assert::Assertions::Assertion)-instance-method","html_id":"validate(groups:Array(String)=Array(String).new):Array(Assert::Assertions::Assertion)-instance-method","name":"validate","doc":"Runs the assertions on `self`, returning the assertions that are not valid.\nOptionally only run assertions a part of the provided *groups*.","summary":"<p>Runs the assertions on <code>self</code>, returning the assertions that are not valid.</p>","abstract":false,"args":[{"name":"groups","doc":null,"default_value":"Array(String).new","external_name":"groups","restriction":"Array(String)"}],"args_string":"(groups : Array(String) = <span class=\"t\">Array</span>(<span class=\"t\">String</span>).<span class=\"k\">new</span>) : Array(Assert::Assertions::Assertion)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assert.cr#L143","def":{"name":"validate","args":[{"name":"groups","doc":null,"default_value":"Array(String).new","external_name":"groups","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Assert::Assertions::Assertion)","visibility":"Public","body":"{% if true %}\n      {% assertions = [] of String %}\n      {% for ivar in @type.instance_vars %}\n        # TODO: Remove once https://github.com/crystal-lang/crystal/issues/8093 is resolved\n        {% for assertion in Assert::Assertions::Assertion.subclasses.select do |__arg2|\n  __arg2.name.stringify.includes?(\"(P\")\nend %}\n          {% if ((ann_class = assertion.annotation(Assert::Assertions::Register)) && (ann_class[:annotation] != nil)) && (ann = ivar.annotation(ann_class[:annotation].resolve)) %}\n            {% if ann[\"property_name\"]\n  raise(\"#{@type}'s #{ann_class} assertion must not set 'property_name'.\")\nend %}\n            {% if ann[\"actual\"]\n  raise(\"#{@type}'s #{ann_class} assertion must not set 'actual'.\")\nend %}\n            {% assertions << \"#{assertion.name.gsub(/\\(.*\\)/, \"\")}(#{ivar.type}#{ann.args.empty? ? \"\".id : \",#{ann.args.splat}\".id}).new(property_name: #{ivar.name.stringify}, actual: #{ivar.id}, #{ann.named_args.double_splat})\".id %}\n          {% end %}\n        {% end %}\n      {% end %}\n      assertions = {{ assertions }} of Assert::Assertions::Assertion\n\n      assertions.reject! { |a| (a.groups & groups).empty? } unless groups.empty?\n\n      assertions.reject &.valid?\n    {% end %}"}},{"id":"validate(*groups:String):Array(Assert::Assertions::Assertion)-instance-method","html_id":"validate(*groups:String):Array(Assert::Assertions::Assertion)-instance-method","name":"validate","doc":"Runs the assertions on `self`, returning the assertions that are not valid.\nOptionally only run assertions a part of the provided *groups*.","summary":"<p>Runs the assertions on <code>self</code>, returning the assertions that are not valid.</p>","abstract":false,"args":[{"name":"groups","doc":null,"default_value":"","external_name":"groups","restriction":"String"}],"args_string":"(*groups : String) : Array(Assert::Assertions::Assertion)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assert.cr#L138","def":{"name":"validate","args":[{"name":"groups","doc":null,"default_value":"","external_name":"groups","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Array(Assert::Assertions::Assertion)","visibility":"Public","body":"validate(groups.to_a)"}},{"id":"validate!(groups:Array(String)=Array(String).new):Nil-instance-method","html_id":"validate!(groups:Array(String)=Array(String).new):Nil-instance-method","name":"validate!","doc":"Runs the assertions on `self`, raises an `Assert::Exceptions::ValidationError` if `self` is not valid.\n\nOptionally only run assertions a part of the provided *groups*.","summary":"<p>Runs the assertions on <code>self</code>, raises an <code><a href=\"Assert/Exceptions/ValidationError.html\">Assert::Exceptions::ValidationError</a></code> if <code>self</code> is not valid.</p>","abstract":false,"args":[{"name":"groups","doc":null,"default_value":"Array(String).new","external_name":"groups","restriction":"Array(String)"}],"args_string":"(groups : Array(String) = <span class=\"t\">Array</span>(<span class=\"t\">String</span>).<span class=\"k\">new</span>) : Nil","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assert.cr#L172","def":{"name":"validate!","args":[{"name":"groups","doc":null,"default_value":"Array(String).new","external_name":"groups","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"failed_assertions = validate(groups)\nif failed_assertions.empty?\nelse\n  raise(Assert::Exceptions::ValidationError.new(failed_assertions))\nend\n"}},{"id":"validate!(*groups:String):Nil-instance-method","html_id":"validate!(*groups:String):Nil-instance-method","name":"validate!","doc":"Runs the assertions on `self`, raises an `Assert::Exceptions::ValidationError` if `self` is not valid.\n\nOptionally only run assertions a part of the provided *groups*.","summary":"<p>Runs the assertions on <code>self</code>, raises an <code><a href=\"Assert/Exceptions/ValidationError.html\">Assert::Exceptions::ValidationError</a></code> if <code>self</code> is not valid.</p>","abstract":false,"args":[{"name":"groups","doc":null,"default_value":"","external_name":"groups","restriction":"String"}],"args_string":"(*groups : String) : Nil","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assert.cr#L167","def":{"name":"validate!","args":[{"name":"groups","doc":null,"default_value":"","external_name":"groups","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"validate!(groups.to_a)"}}],"macros":[],"types":[{"html_id":"assert/Assert/Assertions","path":"Assert/Assertions.html","kind":"module","full_name":"Assert::Assertions","name":"Assertions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/assertion.cr","line_number":3,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L3"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert","kind":"module","full_name":"Assert","name":"Assert"},"doc":"See `Assert::Assertions::Assertion` for assertion usage documentation as well as\n`Assert::Assertions` for the full list of assertions.","summary":"<p>See <code><a href=\"../Assert/Assertions/Assertion.html\">Assert::Assertions::Assertion</a></code> for assertion usage documentation as well as <code><a href=\"../Assert/Assertions.html\">Assert::Assertions</a></code> for the full list of assertions.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"assert/Assert/Assertions/Assertion","path":"Assert/Assertions/Assertion.html","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion","abstract":true,"superclass":{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertion.cr","line_number":170,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L170"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"assert/Assert/Assertions/Choice","kind":"class","full_name":"Assert::Assertions::Choice(PropertyType, ChoicesType)","name":"Choice"},{"html_id":"assert/Assert/Assertions/DivisibleBy","kind":"class","full_name":"Assert::Assertions::DivisibleBy(PropertyType)","name":"DivisibleBy"},{"html_id":"assert/Assert/Assertions/Email","kind":"class","full_name":"Assert::Assertions::Email(PropertyType)","name":"Email"},{"html_id":"assert/Assert/Assertions/EqualTo","kind":"class","full_name":"Assert::Assertions::EqualTo(PropertyType)","name":"EqualTo"},{"html_id":"assert/Assert/Assertions/GreaterThan","kind":"class","full_name":"Assert::Assertions::GreaterThan(PropertyType)","name":"GreaterThan"},{"html_id":"assert/Assert/Assertions/GreaterThanOrEqual","kind":"class","full_name":"Assert::Assertions::GreaterThanOrEqual(PropertyType)","name":"GreaterThanOrEqual"},{"html_id":"assert/Assert/Assertions/InRange","kind":"class","full_name":"Assert::Assertions::InRange(PropertyType, RangeType)","name":"InRange"},{"html_id":"assert/Assert/Assertions/Ip","kind":"class","full_name":"Assert::Assertions::Ip(PropertyType)","name":"Ip"},{"html_id":"assert/Assert/Assertions/IsBlank","kind":"class","full_name":"Assert::Assertions::IsBlank(PropertyType)","name":"IsBlank"},{"html_id":"assert/Assert/Assertions/IsFalse","kind":"class","full_name":"Assert::Assertions::IsFalse(PropertyType)","name":"IsFalse"},{"html_id":"assert/Assert/Assertions/IsNil","kind":"class","full_name":"Assert::Assertions::IsNil(PropertyType)","name":"IsNil"},{"html_id":"assert/Assert/Assertions/IsTrue","kind":"class","full_name":"Assert::Assertions::IsTrue(PropertyType)","name":"IsTrue"},{"html_id":"assert/Assert/Assertions/LessThan","kind":"class","full_name":"Assert::Assertions::LessThan(PropertyType)","name":"LessThan"},{"html_id":"assert/Assert/Assertions/LessThanOrEqual","kind":"class","full_name":"Assert::Assertions::LessThanOrEqual(PropertyType)","name":"LessThanOrEqual"},{"html_id":"assert/Assert/Assertions/NotBlank","kind":"class","full_name":"Assert::Assertions::NotBlank(PropertyType)","name":"NotBlank"},{"html_id":"assert/Assert/Assertions/NotEqualTo","kind":"class","full_name":"Assert::Assertions::NotEqualTo(PropertyType)","name":"NotEqualTo"},{"html_id":"assert/Assert/Assertions/NotNil","kind":"class","full_name":"Assert::Assertions::NotNil(PropertyType)","name":"NotNil"},{"html_id":"assert/Assert/Assertions/RegexMatch","kind":"class","full_name":"Assert::Assertions::RegexMatch(PropertyType)","name":"RegexMatch"},{"html_id":"assert/Assert/Assertions/Size","kind":"class","full_name":"Assert::Assertions::Size(PropertyType, RangeType)","name":"Size"},{"html_id":"assert/Assert/Assertions/Url","kind":"class","full_name":"Assert::Assertions::Url(PropertyType)","name":"Url"},{"html_id":"assert/Assert/Assertions/Uuid","kind":"class","full_name":"Assert::Assertions::Uuid(PropertyType)","name":"Uuid"},{"html_id":"assert/Assert/Assertions/Valid","kind":"class","full_name":"Assert::Assertions::Valid(PropertyType)","name":"Valid"}],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Base class of all assertions.\n\nAn assertion consists of:\n1. An annotation applied to a property.\n2. A class that implements the validation logic for that annotation.\n\nEach assertion defines an *actual* ivar that represents the current value\nof the property.  The type of *actual* is used to determine what types of properties\nthe annotation can be applied to.  I.e. if the type is `String`, that assertion\ncan only be applied to `String` properties.  The generic `P` can also be used, which\nwould allow it to be added to any type of property.\n\nAll assertions must inherit from `Assertion` as well as apply the `Register` annotation, and give the name of the annotation; `Assert::SomeAssertion` for example.\n\nAssertions can define additional ivars within the initializer.  The name of each ivar\nis also used as the name to use on the annotation.\n\nIvars with a default value are considered optional.  The default value\nwill be used if that value is not specified within the annotation.\n\n`Assertion.initializer` can be used as an easier way to define the `initialize` method.\n\n### Custom Assertions\nCustom assertions can easily be defined by inheriting from `Assertion`, applying the `Register` annotation, and setting the name of the annotation to read.\n\n```\n@[Assert::Assertions::Register(annotation: Assert::MyCustom)]\nclass MyCustom(PropertyType) < Assert::Assertions::Assertion\n  def initialize(\n    @actual : String?,            # This assertion can only be used on `String?` or `String` properties. Is set automatically.\n    @some_value : Int32,          # A required argument, must be supplied within the annotation or a compile time error will be raised.\n    property_name : String,       # The property this assertion was applied to.  Is set automatically.\n    @some_bool : Bool = true,     # An optional argument.  The value will be `true` if *some_bool* is not specified within the annotation.\n    message : String? = nil,      # Optionally override the message on a per property basis.\n    groups : Array(String)? = nil # Optionally override the groups on a per property basis.\n  )\n    super property_name, message, groups # Be sure to call `super property_name, message, groups` to set the property_name/message/groups.\n  end\n\n  # The initialize method could also have been written using the `Assertion.initializer` macro.\n  initializer(\n    actual: String?,\n    some_value: Int32,\n    some_bool: \"Bool = true\"\n  )\n\n  # :inherit:\n  def default_message_template : String\n    # The default message template to use if one is not supplied.\n    # Instance variables on `self` can be referenced/formatted within the template by using named sprintf named arguments. E.x. `%{some_bool}`, or `%<some_number>0.4d`, etc.\n    \"'%{property_name}' is not valid.\"\n  end\n\n  # :inherit:\n  def valid? : Bool\n    # Define validation logic\n  end\nend\n```\n\nNOTE: Every assertion must have a generic `PropertyType` as its first generic type variable; even if the assertion is not using it.\n\nThis custom assertion is now ready to use.  Be sure to `include Assert`.\n```\n# Since *some_value* does not have a default value, it is required.\n@[Assert::MyCustom(some_value: 123)]\nproperty name : String\n\n# Override the default value of *some_bool*.\n@[Assert::MyCustom(some_value: 456, some_bool: false)]\nproperty name : String\n```\n\n### Validation Groups\nBy default, `Assert` bases the validity of an object based on _all_ the assertions defined on it.  However, each assertion has an optional\n`#groups` property that can be used to assign that assertion to a given group(s). Assertions without explicit groups are automatically assigned\nto the \"default\" group.  This allows assertions without a group to be ran in conjunction with those in an explicit group.\nValidation groups can be used to run a subset of assertions, and base the validity of the object on that subset.\n```\nclass Groups\n  include Assert\n\n  def initialize(@group_1 : Int32, @group_2 : Int32, @default_group : Int32); end\n\n  @[Assert::EqualTo(value: 100, groups: [\"group1\"])]\n  property group_1 : Int32\n\n  @[Assert::EqualTo(value: 200, groups: [\"group2\"])]\n  property group_2 : Int32\n\n  @[Assert::EqualTo(value: 300)]\n  property default_group : Int32\nend\n\nGroups.new(100, 200, 300).valid?                      # => true\nGroups.new(100, 100, 100).valid?                      # => false\nGroups.new(100, 100, 100).valid?([\"group1\"])          # => true\nGroups.new(200, 100, 300).valid?([\"default\"])         # => true\nGroups.new(100, 200, 200).valid?(\"group1\", \"default\") # => false\n```\n\n### Generics\n\nAn assertion can utilize additional generic type variables, other than the required `PropertyType`.  These would then be provided as positional arguments on the assertion annotation.\n\n```\n@[Assert::Assertions::Register(annotation: Assert::Exists)]\n# A custom assertion that validates if a record exists with the given *id*.\n#\n# For example, an ORM model where `.exists?` checks if a record exists with the given PK.\n# I.e. `SELECT exists(select 1 from \"users\" WHERE id = 123);`\nclass Exists(PropertyType, Model) < Assert::Assertions::Assertion\n  initializer(\n    actual: PropertyType\n  )\n\n  # :inherit:\n  def default_message_template : String\n    \"'%{actual}' is not a valid %{property_name}.\"\n  end\n\n  # :inherit:\n  def valid? : Bool\n    # Can use any class method defined on `M`\n    Model.exists? @actual\n  end\nend\n```\n```\nclass Post < SomeORM::Model\n  include Assert\n\n  def initialize; end\n\n  @[Assert::Exists(User)]\n  property author_id : Int64 = 17\nend\n```\nThis would assert that there is a `User` record with a primary key value of `17`.\n\nOf course you can also define named arguments on the annotation if you wanted to, for example, customize the error message on a per annotation basis.\n```\n@[Assert::Exists(User, message: \"No user exists with the provided ID\")]\nproperty author_id : Int64\n```\n\n### Extending\nBy default, objects must be validated manually; that is using `Assert#valid?`, `Assert#validate`, or `Assert#validate!` on your own.  This is left up to the user to allow them to\ncontrol how exactly validation of their objects should work.\n\n`Assert` is easy to integrate into existing frameworks/applications.  For example, it could be included in a web framework to automatically run\nassertions on deserialization, by adding some logic to a `after_initialize` method if using `JSON::Serializable`.  It could also be added into an ORM to check if the object is valid before saving.\nYou could also add logic to an initializer so that it would validate the object on initialization.\n\nNOTE: `nil` is considered to be a valid value if the property is nilable.  Either use a non-nilable type, or a `NotNil` assertion.","summary":"<p>Base class of all assertions.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":"Sets the *property_name*, and *message*/*groups* if none were provided.","summary":"<p>Sets the <em>property_name</em>, and <em>message</em>/<em>groups</em> if none were provided.</p>","abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L183","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(property_name, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code><a href=\"../../Assert/Assertions/Assertion.html#message_template:String-instance-method\">#message_template</a></code> to use if no <em>message</em> is provided.</p>","abstract":true,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L189","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":""}},{"id":"groups:Array(String)-instance-method","html_id":"groups:Array(String)-instance-method","name":"groups","doc":"The validation groups `self` is a part of.","summary":"<p>The validation groups <code>self</code> is a part of.</p>","abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L174","def":{"name":"groups","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@groups"}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":true,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L194","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":""}},{"id":"message_template:String-instance-method","html_id":"message_template:String-instance-method","name":"message_template","doc":"The raw template string that is used to build `#message`.","summary":"<p>The raw template string that is used to build <code><a href=\"../../Assert/Assertions/Assertion.html#message:String-instance-method\">#message</a></code>.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L177","def":{"name":"message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message_template"}},{"id":"property_name:String-instance-method","html_id":"property_name:String-instance-method","name":"property_name","doc":"The name of the property `self` was applied to.","summary":"<p>The name of the property <code>self</code> was applied to.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L180","def":{"name":"property_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@property_name"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":true,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L197","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}}],"macros":[{"id":"initializer(**ivars)-macro","html_id":"initializer(**ivars)-macro","name":"initializer","doc":"Builds `initialize` with the provided *ivars*.\n\nHandles setting the required parent arguments and calling super.\n```\ninitializer(actual: String?, some_bool: \"Bool = false\")\n# def initialize(\n#   property_name : String,\n#   @actual : ::Union(String, ::Nil),\n#   @some_bool : Bool = false,\n#   message : String? = nil,\n#   groups : Array(String)? = nil\n# )\n#   super property_name, message, groups\n# end\n```","summary":"<p>Builds <code>initialize</code> with the provided <em>ivars</em>.</p>","abstract":false,"args":[],"args_string":"(**ivars)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L214","def":{"name":"initializer","args":[],"double_splat":{"name":"ivars","doc":null,"default_value":"","external_name":"ivars","restriction":""},"splat_index":null,"block_arg":null,"visibility":"Public","body":"      def initialize(\n        property_name : String,\n        \n{% for ivar, type in ivars %}\n          @{{ ivar.id }} : {{ type.id }},\n        {% end %}\n\n        message : String? = nil,\n        groups : Array(String)? = nil,\n      )\n        super property_name, message, groups\n      \nend\n    \n"}}],"types":[]},{"html_id":"assert/Assert/Assertions/Choice","path":"Assert/Assertions/Choice.html","kind":"class","full_name":"Assert::Assertions::Choice(PropertyType, ChoicesType)","name":"Choice","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/choice.cr","line_number":37,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/choice.cr#L37"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is a valid choice.\n\n### Optional Arguments\n* *min_matches* - Must select _at least_ *min_matches* to be valid.\n* *min_message* - Message to display if too few choices are selected.\n* *max_matches* - Must select _at most_ *max_matches* to be valid.\n* *max_message* - Message to display if too many choices are selected.\n* *multiple_message* - Message to display if one or more values in *actual* are not in *choices*.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::Choice(choices: [\"Active\", \"Inactive\", \"Pending\"])]\n  property status : String = \"Inactive\"\n\n  @[Assert::Choice(choices: [2, 4, 6], multiple_message: \"One ore more value is invalid\")]\n  property fav_numbers : Array(Int32) = [2, 4, 6]\n\n  @[Assert::Choice(choices: ['a', 'b', 'c'], min_matches: 2, min_message: \"You must have at least 2 choices\")]\n  property fav_letters_min : Array(Char) = ['a', 'c']\n\n  @[Assert::Choice(choices: ['a', 'b', 'c'], max_matches: 2, max_message: \"You must have at most 2 choices\")]\n  property fav_letters_max : Array(Char) = ['a']\nend\n\nExample.new.valid? # => true\n```\n\nNOTE: The generic `ChoicesType` represents the type of *choices*.","summary":"<p>Validates a property is a valid choice.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,choices:ChoicesType,min_matches:Int32?=nil,max_matches:Int32?=nil,min_message:String?=nil,max_message:String?=nil,multiple_message:String?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,choices:ChoicesType,min_matches:Int32?=nil,max_matches:Int32?=nil,min_message:String?=nil,max_message:String?=nil,multiple_message:String?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"choices","doc":null,"default_value":"","external_name":"choices","restriction":"ChoicesType"},{"name":"min_matches","doc":null,"default_value":"nil","external_name":"min_matches","restriction":"Int32 | ::Nil"},{"name":"max_matches","doc":null,"default_value":"nil","external_name":"max_matches","restriction":"Int32 | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"multiple_message","doc":null,"default_value":"nil","external_name":"multiple_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, choices : ChoicesType, min_matches : Int32? = <span class=\"n\">nil</span>, max_matches : Int32? = <span class=\"n\">nil</span>, min_message : String? = <span class=\"n\">nil</span>, max_message : String? = <span class=\"n\">nil</span>, multiple_message : String? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/choice.cr#L38","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"choices","doc":null,"default_value":"","external_name":"choices","restriction":"ChoicesType"},{"name":"min_matches","doc":null,"default_value":"nil","external_name":"min_matches","restriction":"Int32 | ::Nil"},{"name":"max_matches","doc":null,"default_value":"nil","external_name":"max_matches","restriction":"Int32 | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"multiple_message","doc":null,"default_value":"nil","external_name":"multiple_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Choice(PropertyType, ChoicesType).allocate\n_.initialize(property_name, actual, choices, min_matches, max_matches, min_message, max_message, multiple_message, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/choice.cr#L49","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' is not a valid choice\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/choice.cr#L37","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/choice.cr#L54","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if actual = @actual\nelse\n  return true\nend\ncase actual\nwhen Array\n  num_matches = (actual & @choices).size\n  if min = @min_matches\n    if num_matches < min\n    else\n      return true\n    end\n    @message_template = @min_message || \"'%{property_name}': You must select at least #{@min_matches} choice(s)\"\n    return false\n  end\n  if max = @max_matches\n    if num_matches > max\n    else\n      return true\n    end\n    @message_template = @max_message || \"'%{property_name}': You must select at most #{@max_matches} choice(s)\"\n    return false\n  end\n  if num_matches != @choices.size\n    @message_template = @multiple_message || \"'%{property_name}': One or more of the given values is invalid\"\n    return false\n  end\n  true\nelse\n  @choices.includes?(actual)\nend\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/DivisibleBy","path":"Assert/Assertions/DivisibleBy.html","kind":"class","full_name":"Assert::Assertions::DivisibleBy(PropertyType)","name":"DivisibleBy","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/divisible_by.cr","line_number":32,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/divisible_by.cr#L32"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is divisible by *value*.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::DivisibleBy(value: 0.5)]\n  property float : Float64 = 100.0\n\n  @[Assert::DivisibleBy(value: 2)]\n  property int : Int32 = 1234\n\n  @[Assert::DivisibleBy(value: get_value)]\n  property getter_property : UInt16 = 256_u16\n\n  def get_value : UInt16\n    16_u16\n  end\nend\n\nExample.new.valid? # => true\n```\n\nNOTE: *value* can be a hard-coded value like `10`, the name of another property, a constant, or the name of a method.\nNOTE: The type of *value* and the property must match.","summary":"<p>Validates a property is divisible by <em>value</em>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/divisible_by.cr#L33","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = DivisibleBy(PropertyType).allocate\n_.initialize(property_name, actual, value, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/divisible_by.cr#L39","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be a multiple of '%{value}'\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/divisible_by.cr#L32","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/divisible_by.cr#L44","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (actual = @actual) && (value = @value)\nelse\n  return true\nend\n(actual % value).zero?\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/Email","path":"Assert/Assertions/Email.html","kind":"class","full_name":"Assert::Assertions::Email(PropertyType)","name":"Email","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/email.cr","line_number":29,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L29"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is a properly formatted email.\n\n### Optional Arguments\n* *mode* - Which validation pattern to use.  See `EmailValidationMode`.\n* *normalizer* - Execute a `Proc` to alter *actual* before checking its validity.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::Email]\n  property loose_email : String = \"example@-example.com\"\n\n  @[Assert::Email(mode: :html5)]\n  property strict_email : String = \"example@example.co.uk\"\n\n  @[Assert::Email(mode: :html5, normalizer: ->(actual : String) { actual.strip })]\n  property strict_email_normalizer : String = \"  example@example.co.uk  \"\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a property is a properly formatted email.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:Union(String,Nil),mode:EmailValidationMode=EmailValidationMode::Loose,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:Union(String,Nil),mode:EmailValidationMode=EmailValidationMode::Loose,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"mode","doc":null,"default_value":"EmailValidationMode::Loose","external_name":"mode","restriction":"EmailValidationMode"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : Union(String, Nil), mode : EmailValidationMode = <span class=\"t\">EmailValidationMode</span><span class=\"t\">::</span><span class=\"t\">Loose</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L30","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"mode","doc":null,"default_value":"EmailValidationMode::Loose","external_name":"mode","restriction":"EmailValidationMode"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Email(PropertyType).allocate\n_.initialize(property_name, actual, mode, normalizer, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L37","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' is not a valid email address\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L29","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L42","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if actual = @actual\nelse\n  return true\nend\n!(((normalizer = @normalizer) ? normalizer.call(actual) : actual) =~ @mode.get_pattern).nil?\n"}}],"macros":[],"types":[{"html_id":"assert/Assert/Assertions/Email/EmailValidationMode","path":"Assert/Assertions/Email/EmailValidationMode.html","kind":"enum","full_name":"Assert::Assertions::Email::EmailValidationMode","name":"EmailValidationMode","abstract":false,"superclass":null,"ancestors":[{"html_id":"assert/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"assert/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"assert/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/email.cr","line_number":48,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L48"}],"repository_name":"assert","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Loose","name":"Loose","value":"0","doc":"A simple regular expression. Allows all values with an `@` symbol in, and a `.` in the second host part of the email address.","summary":"<p>A simple regular expression.</p>"},{"id":"HTML5","name":"HTML5","value":"1","doc":"This matches the pattern used for the [HTML5 email input element](https://www.w3.org/TR/html5/sec-forms.html#email-state-typeemail).","summary":"<p>This matches the pattern used for the <a href=\"https://www.w3.org/TR/html5/sec-forms.html#email-state-typeemail\" target=\"_blank\">HTML5 email input element</a>.</p>"},{"id":"Strict","name":"Strict","value":"2","doc":"TODO: Validate against [RFC 5322](https://tools.ietf.org/html/rfc5322).","summary":"<p><span class=\"flag orange\">TODO</span>  Validate against <a href=\"https://tools.ietf.org/html/rfc5322\" target=\"_blank\">RFC 5322</a>.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions/Email","kind":"class","full_name":"Assert::Assertions::Email(PropertyType)","name":"Email"},"doc":"Which validation pattern to use to validate the email.","summary":"<p>Which validation pattern to use to validate the email.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"get_pattern:Regex-instance-method","html_id":"get_pattern:Regex-instance-method","name":"get_pattern","doc":"Returns the `Regex` pattern for `self`.","summary":"<p>Returns the <code>Regex</code> pattern for <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Regex","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L59","def":{"name":"get_pattern","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Regex","visibility":"Public","body":"case self\nwhen .loose?\n  /^.+\\@\\S+\\.\\S+$/\nwhen .html5?\n  /^[a-zA-Z0-9.!\\#$\\%&\\'*+\\\\\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/\nelse\n  raise(NotImplementedError.new(\"Unsupported pattern: #{self}\"))\nend"}},{"id":"html5?-instance-method","html_id":"html5?-instance-method","name":"html5?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L53","def":{"name":"html5?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == HTML5"}},{"id":"loose?-instance-method","html_id":"loose?-instance-method","name":"loose?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L50","def":{"name":"loose?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Loose"}},{"id":"strict?-instance-method","html_id":"strict?-instance-method","name":"strict?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/email.cr#L56","def":{"name":"strict?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Strict"}}],"macros":[],"types":[]}]},{"html_id":"assert/Assert/Assertions/EqualTo","path":"Assert/Assertions/EqualTo.html","kind":"class","full_name":"Assert::Assertions::EqualTo(PropertyType)","name":"EqualTo","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/equal_to.cr","line_number":36,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/equal_to.cr#L36"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is equal to *value*.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::EqualTo(value: 100)]\n  property int32 : Int32 = 100\n\n  @[Assert::EqualTo(value: 0.0001)]\n  property float : Float64 = 0.0001\n\n  @[Assert::EqualTo(value: \"X\")]\n  property string : String = \"X\"\n\n  @[Assert::EqualTo(value: max_value)]\n  property getter_property : UInt8 = 255_u8\n\n  def max_value : UInt8\n    255_u8\n  end\nend\n\nExample.new.valid? # => true\n```\n\nNOTE: *value* can be a hard-coded value like `10`, the name of another property, a constant, or the name of a method.\nNOTE: The type of *value* and *actual* must match.\nNOTE: `PropertyType` can be anything that defines a `#==` method.","summary":"<p>Validates a property is equal to <em>value</em>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/equal_to.cr#L37","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = EqualTo(PropertyType).allocate\n_.initialize(property_name, actual, value, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/equal_to.cr#L43","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be equal to '%{value}'\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/equal_to.cr#L36","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/equal_to.cr#L48","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@actual == @value"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/GreaterThan","path":"Assert/Assertions/GreaterThan.html","kind":"class","full_name":"Assert::Assertions::GreaterThan(PropertyType)","name":"GreaterThan","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/greater_than.cr","line_number":42,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than.cr#L42"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is greater than *value*.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::GreaterThan(value: 100)]\n  property int32 : Int32 = 101\n\n  @[Assert::GreaterThan(value: 0.0001_f64)]\n  property float : Float64 = 0.0002\n\n  @[Assert::GreaterThan(value: \"X\")]\n  property string : String = \"Y\"\n\n  @[Assert::GreaterThan(value: end_date)]\n  property start_date : Time? = Time.utc(2019, 5, 29)\n\n  @[Assert::GreaterThan(value: Time.utc(2019, 1, 1))]\n  property end_date : Time? = Time.utc(2019, 5, 20)\n\n  @[Assert::GreaterThan(value: max_value)]\n  property getter_property : UInt8 = 250_u8\n\n  def max_value : UInt8\n    200_u8\n  end\nend\n\nExample.new.valid? # => true\n```\n\nNOTE: *value* can be a hard-coded value like `10`, the name of another property, a constant, or the name of a method.\nNOTE: The type of *value* and the property must match.\nNOTE: `PropertyType` can be anything that defines a `#>` method.","summary":"<p>Validates a property is greater than <em>value</em>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than.cr#L43","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = GreaterThan(PropertyType).allocate\n_.initialize(property_name, actual, value, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than.cr#L49","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be greater than '%{value}'\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than.cr#L42","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than.cr#L54","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(value = @value) && (actual = @actual) ? actual > value : true"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/GreaterThanOrEqual","path":"Assert/Assertions/GreaterThanOrEqual.html","kind":"class","full_name":"Assert::Assertions::GreaterThanOrEqual(PropertyType)","name":"GreaterThanOrEqual","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/greater_than_or_equal.cr","line_number":42,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than_or_equal.cr#L42"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is greater than or equal to *value*.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::GreaterThanOrEqual(value: 100)]\n  property int32 : Int32 = 100\n\n  @[Assert::GreaterThanOrEqual(value: 0.0001_f64)]\n  property float : Float64 = 0.0002\n\n  @[Assert::GreaterThanOrEqual(value: \"X\")]\n  property string : String = \"Y\"\n\n  @[Assert::GreaterThanOrEqual(value: end_date)]\n  property start_date : Time? = Time.utc(2019, 5, 29)\n\n  @[Assert::GreaterThanOrEqual(value: Time.utc(2019, 1, 1))]\n  property end_date : Time? = Time.utc(2019, 5, 20)\n\n  @[Assert::GreaterThanOrEqual(value: max_value)]\n  property getter_property : UInt8 = 250_u8\n\n  def max_value : UInt8\n    250_u8\n  end\nend\n\nExample.new.valid? # => true\n```\n\nNOTE: *value* can be a hard-coded value like `10`, the name of another property, a constant, or the name of a method.\nNOTE: The type of *value* and the property must match.\nNOTE: `PropertyType` can be anything that defines a `#>=` method.","summary":"<p>Validates a property is greater than or equal to <em>value</em>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than_or_equal.cr#L43","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = GreaterThanOrEqual(PropertyType).allocate\n_.initialize(property_name, actual, value, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than_or_equal.cr#L49","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be greater than or equal to '%{value}'\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than_or_equal.cr#L42","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/greater_than_or_equal.cr#L54","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(value = @value) && (actual = @actual) ? actual >= value : true"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/InRange","path":"Assert/Assertions/InRange.html","kind":"class","full_name":"Assert::Assertions::InRange(PropertyType, RangeType)","name":"InRange","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/in_range.cr","line_number":37,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/in_range.cr#L37"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is within a given `Range`.\n\n### Optional Arguments\n* *not_in_range_message* - Message to display if *actual* is not included in *range*.\n* *min_message* - Message to display if *range* only has a minimum and *actual* is too small.\n* *max_message* - Message to display if *range* only has a maximum and *actual* is too big.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::InRange(Range(Float64, Nil), range: 0.0..)]\n  property minimum_only : Int32 = 27\n\n  @[Assert::InRange(Range(Nil, Int64), range: ..100_000_000_000)]\n  property maximum_only : Int32 = 50_000\n\n  @[Assert::InRange(Range(Float64, Float64), range: 0.0..1000.0)]\n  property range : Float64 = 3.14\n\n  @[Assert::InRange(Range(Int32, Int32), range: 0..10, not_in_range_message: \"That is not a valid %{property_name}\")]\n  property fav_number : UInt8 = 8_u8\n\n  @[Assert::InRange(Range(UInt8, UInt8), range: 0_u8..50_u8, min_message: \"Number of cores must be positive\", max_message: \"There must be less than 50 cores\")]\n  property cores : Int32 = 32\nend\n\nExample.new.valid? # => true\n```\nNOTE: The generic `RangeType` represents the type of *range*.","summary":"<p>Validates a property is within a given <code>Range</code>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,range:RangeType,not_in_range_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,range:RangeType,not_in_range_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"not_in_range_message","doc":null,"default_value":"nil","external_name":"not_in_range_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, range : RangeType, not_in_range_message : String? = <span class=\"n\">nil</span>, min_message : String? = <span class=\"n\">nil</span>, max_message : String? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/in_range.cr#L38","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"not_in_range_message","doc":null,"default_value":"nil","external_name":"not_in_range_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = InRange(PropertyType, RangeType).allocate\n_.initialize(property_name, actual, range, not_in_range_message, min_message, max_message, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/in_range.cr#L47","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' is out of range\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/in_range.cr#L37","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.\nameba:disable Metrics/CyclomaticComplexity","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/in_range.cr#L53","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if actual = @actual\nelse\n  return true\nend\nif @range.includes?(actual)\n  return true\nend\nlower_bound = @range.begin\nupper_bound = @range.end\n@message_template = if lower_bound && upper_bound\n  @not_in_range_message || \"'%{property_name}' should be between #{lower_bound} and #{@range.excludes_end? ? upper_bound - 1 : upper_bound}\"\nelse\n  if upper_bound && (@range.excludes_end? ? actual >= upper_bound : actual > upper_bound)\n    @max_message || \"'%{property_name}' should be #{@range.excludes_end? ? upper_bound - 1 : upper_bound} or less\"\n  else\n    @min_message || \"'%{property_name}' should be #{lower_bound} or more\"\n  end\nend\nfalse\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/Ip","path":"Assert/Assertions/Ip.html","kind":"class","full_name":"Assert::Assertions::Ip(PropertyType)","name":"Ip","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/ip.cr","line_number":29,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/ip.cr#L29"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is a properly formatted IP address.\n\n### Optional Arguments\n* *version* - Which IP version to use.  See `IPVersion`.\n* *normalizer* - Execute a `Proc` to alter *actual* before checking its validity.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::Ip]\n  property ipv4 : String = \"255.255.255.255\"\n\n  @[Assert::Ip(version: :ipv6)]\n  property ipv6 : String = \"0::0\"\n\n  @[Assert::Ip(normalizer: ->(actual : String) { actual.strip })]\n  property normalizer : String = \"  192.168.1.1  \"\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a property is a properly formatted IP address.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:Union(String,Nil),version:IPVersion=IPVersion::IPV4,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:Union(String,Nil),version:IPVersion=IPVersion::IPV4,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"version","doc":null,"default_value":"IPVersion::IPV4","external_name":"version","restriction":"IPVersion"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : Union(String, Nil), version : IPVersion = <span class=\"t\">IPVersion</span><span class=\"t\">::</span><span class=\"t\">IPV4</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/ip.cr#L30","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"version","doc":null,"default_value":"IPVersion::IPV4","external_name":"version","restriction":"IPVersion"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Ip(PropertyType).allocate\n_.initialize(property_name, actual, version, normalizer, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/ip.cr#L37","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' is not a valid IP address\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/ip.cr#L29","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/ip.cr#L42","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if actual = @actual\nelse\n  return true\nend\n!(((normalizer = @normalizer) ? normalizer.call(actual) : actual) =~ @version.get_pattern).nil?\n"}}],"macros":[],"types":[{"html_id":"assert/Assert/Assertions/Ip/IPVersion","path":"Assert/Assertions/Ip/IPVersion.html","kind":"enum","full_name":"Assert::Assertions::Ip::IPVersion","name":"IPVersion","abstract":false,"superclass":null,"ancestors":[{"html_id":"assert/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"assert/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"assert/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/ip.cr","line_number":48,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/ip.cr#L48"}],"repository_name":"assert","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"IPV4","name":"IPV4","value":"0","doc":"Matches IPv4 format.","summary":"<p>Matches IPv4 format.</p>"},{"id":"IPV6","name":"IPV6","value":"1","doc":"Matches IPv6 format.","summary":"<p>Matches IPv6 format.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions/Ip","kind":"class","full_name":"Assert::Assertions::Ip(PropertyType)","name":"Ip"},"doc":"Which IP version to use to validate against.","summary":"<p>Which IP version to use to validate against.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"get_pattern:Regex-instance-method","html_id":"get_pattern:Regex-instance-method","name":"get_pattern","doc":"Returns the `Regex` pattern for `self`.","summary":"<p>Returns the <code>Regex</code> pattern for <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Regex","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/ip.cr#L56","def":{"name":"get_pattern","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Regex","visibility":"Public","body":"case self\nwhen .ipv4?\n  /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\nwhen .ipv6?\n  /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/\nelse\n  raise(NotImplementedError.new(\"Unsupported version: #{self}\"))\nend"}},{"id":"ipv4?-instance-method","html_id":"ipv4?-instance-method","name":"ipv4?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/ip.cr#L50","def":{"name":"ipv4?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IPV4"}},{"id":"ipv6?-instance-method","html_id":"ipv6?-instance-method","name":"ipv6?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/ip.cr#L53","def":{"name":"ipv6?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IPV6"}}],"macros":[],"types":[]}]},{"html_id":"assert/Assert/Assertions/IsBlank","path":"Assert/Assertions/IsBlank.html","kind":"class","full_name":"Assert::Assertions::IsBlank(PropertyType)","name":"IsBlank","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/is_blank.cr","line_number":31,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_blank.cr#L31"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is blank, that is, consists exclusively of unicode whitespace.\n\n### Optional Arguments\n* *normalizer* - Execute a `Proc` to alter *actual* before checking its validity.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::IsBlank]\n  property string : String = \"\"\n\n  @[Assert::IsBlank]\n  property multiple_spaces : String = \"      \"\n\n  @[Assert::IsBlank]\n  property nilble_string : String? = nil\n\n  @[Assert::IsBlank(normalizer: ->(actual : String) { actual.chomp('a') })]\n  property normalizer : String = \"    a\"\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a property is blank, that is, consists exclusively of unicode whitespace.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : Union(String, Nil), normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_blank.cr#L32","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = IsBlank(PropertyType).allocate\n_.initialize(property_name, actual, normalizer, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_blank.cr#L38","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be blank\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_blank.cr#L31","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_blank.cr#L43","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if actual = @actual\nelse\n  return true\nend\n((normalizer = @normalizer) ? normalizer.call(actual) : actual).blank?\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/IsFalse","path":"Assert/Assertions/IsFalse.html","kind":"class","full_name":"Assert::Assertions::IsFalse(PropertyType)","name":"IsFalse","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/is_false.cr","line_number":22,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_false.cr#L22"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is `false`.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::IsFalse]\n  property bool : Bool = false\n\n  @[Assert::IsFalse]\n  property nilable_bool : Bool? = nil\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a property is <code>false</code>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : Union(Bool, Nil), message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_false.cr#L23","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = IsFalse(PropertyType).allocate\n_.initialize(property_name, actual, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_false.cr#L28","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be false\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_false.cr#L22","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_false.cr#L33","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if @actual.nil?\n  return true\nend\n@actual == false\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/IsNil","path":"Assert/Assertions/IsNil.html","kind":"class","full_name":"Assert::Assertions::IsNil(PropertyType)","name":"IsNil","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/is_nil.cr","line_number":22,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_nil.cr#L22"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is `nil`.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::IsNil]\n  property nilable_int : Int32? = nil\n\n  @[Assert::IsNil]\n  property nilable_string : String? = nil\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a property is <code>nil</code>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_nil.cr#L23","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = IsNil(PropertyType).allocate\n_.initialize(property_name, actual, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_nil.cr#L28","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be null\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_nil.cr#L22","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_nil.cr#L33","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@actual.nil?"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/IsTrue","path":"Assert/Assertions/IsTrue.html","kind":"class","full_name":"Assert::Assertions::IsTrue(PropertyType)","name":"IsTrue","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/is_true.cr","line_number":22,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_true.cr#L22"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is `true`.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::IsTrue]\n  property bool : Bool = true\n\n  @[Assert::IsTrue]\n  property nilable_bool : Bool? = nil\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a property is <code>true</code>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:Union(Bool,Nil),message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : Union(Bool, Nil), message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_true.cr#L23","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(Bool, ::Nil)"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = IsTrue(PropertyType).allocate\n_.initialize(property_name, actual, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_true.cr#L28","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be true\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_true.cr#L22","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/is_true.cr#L33","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if @actual.nil?\n  return true\nend\n@actual == true\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/LessThan","path":"Assert/Assertions/LessThan.html","kind":"class","full_name":"Assert::Assertions::LessThan(PropertyType)","name":"LessThan","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/less_than.cr","line_number":42,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than.cr#L42"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is less than *value*.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::LessThan(value: 100)]\n  property int32 : Int32 = 95\n\n  @[Assert::LessThan(value: 0.0001_f64)]\n  property float : Float64 = 0.000001\n\n  @[Assert::LessThan(value: \"X\")]\n  property string : String = \"F\"\n\n  @[Assert::LessThan(value: Time.utc(2019, 6, 1))]\n  property start_date : Time? = Time.utc(2019, 5, 29)\n\n  @[Assert::LessThan(value: start_date)]\n  property end_date : Time?\n\n  @[Assert::LessThan(value: max_value)]\n  property getter_property : UInt8 = 250_u8\n\n  def max_value : UInt8\n    255_u8\n  end\nend\n\nExample.new.valid? # => true\n```\n\nNOTE: *value* can be a hard-coded value like `10`, the name of another property, a constant, or the name of a method.\nNOTE: The type of *value* and the property must match.\nNOTE: `PropertyType` can be anything that defines a `#<` method.","summary":"<p>Validates a property is less than <em>value</em>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than.cr#L43","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LessThan(PropertyType).allocate\n_.initialize(property_name, actual, value, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than.cr#L49","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be less than '%{value}'\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than.cr#L42","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than.cr#L54","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(value = @value) && (actual = @actual) ? actual < value : true"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/LessThanOrEqual","path":"Assert/Assertions/LessThanOrEqual.html","kind":"class","full_name":"Assert::Assertions::LessThanOrEqual(PropertyType)","name":"LessThanOrEqual","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/less_than_or_equal.cr","line_number":42,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than_or_equal.cr#L42"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is less than or equal to *value*.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::LessThanOrEqual(value: 100)]\n  property int32_property : Int32 = 100\n\n  @[Assert::LessThanOrEqual(value: 0.0001_f64)]\n  property float_property : Float64 = 0.000001\n\n  @[Assert::LessThanOrEqual(value: \"X\")]\n  property string_property : String = \"X\"\n\n  @[Assert::LessThanOrEqual(value: Time.utc(2019, 6, 1))]\n  property start_date : Time? = Time.utc(2019, 5, 29)\n\n  @[Assert::LessThanOrEqual(value: start_date)]\n  property end_date : Time?\n\n  @[Assert::LessThanOrEqual(value: max_value)]\n  property getter_property : UInt8 = 250_u8\n\n  def max_value : UInt8\n    255_u8\n  end\nend\n\nExample.new.valid? # => true\n```\n\nNOTE: *value* can be a hard-coded value like `10`, the name of another property, a constant, or the name of a method.\nNOTE: The type of *value* and the property must match.\nNOTE: `PropertyType` can be anything that defines a `#<=` method.","summary":"<p>Validates a property is less than or equal to <em>value</em>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than_or_equal.cr#L43","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = LessThanOrEqual(PropertyType).allocate\n_.initialize(property_name, actual, value, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than_or_equal.cr#L49","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be less than or equal to '%{value}'\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than_or_equal.cr#L42","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/less_than_or_equal.cr#L54","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(value = @value) && (actual = @actual) ? actual <= value : true"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/NotBlank","path":"Assert/Assertions/NotBlank.html","kind":"class","full_name":"Assert::Assertions::NotBlank(PropertyType)","name":"NotBlank","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/not_blank.cr","line_number":31,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_blank.cr#L31"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is not blank, that is, does not consist exclusively of unicode whitespace.\n\n### Optional Arguments\n* *normalizer* - Execute a `Proc` to alter *actual* before checking its validity.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::NotBlank]\n  property string : String = \"foo\"\n\n  @[Assert::NotBlank]\n  property single_character : String = \"   a   \"\n\n  @[Assert::NotBlank]\n  property nilble_string : String? = nil\n\n  @[Assert::NotBlank(normalizer: ->(actual : String) { \"Hello #{actual}\" })]\n  property normalizer : String = \"\"\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a property is not blank, that is, does not consist exclusively of unicode whitespace.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:Union(String,Nil),normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : Union(String, Nil), normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_blank.cr#L32","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = NotBlank(PropertyType).allocate\n_.initialize(property_name, actual, normalizer, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_blank.cr#L38","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should not be blank\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_blank.cr#L31","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_blank.cr#L43","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if actual = @actual\nelse\n  return true\nend\n!((normalizer = @normalizer) ? normalizer.call(actual) : actual).blank?\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/NotEqualTo","path":"Assert/Assertions/NotEqualTo.html","kind":"class","full_name":"Assert::Assertions::NotEqualTo(PropertyType)","name":"NotEqualTo","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/not_equal_to.cr","line_number":36,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_equal_to.cr#L36"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is not equal to *value*.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::NotEqualTo(value: 100)]\n  property int32 : Int32 = 50\n\n  @[Assert::NotEqualTo(value: 0.0001)]\n  property float : Float64 = 0.00001\n\n  @[Assert::NotEqualTo(value: \"X\")]\n  property string : String = \"Y\"\n\n  @[Assert::NotEqualTo(value: max_value)]\n  property getter_property : UInt8 = 255_u8\n\n  def max_value : UInt8\n    250_u8\n  end\nend\n\nExample.new.valid? # => true\n```\n\nNOTE: *value* can be a hard-coded value like `10`, the name of another property, a constant, or the name of a method.\nNOTE: The type of *value* and *actual* must match.\nNOTE: `PropertyType` can be anything that defines a `#!=` method.","summary":"<p>Validates a property is not equal to <em>value</em>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,value:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, value : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_equal_to.cr#L37","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = NotEqualTo(PropertyType).allocate\n_.initialize(property_name, actual, value, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_equal_to.cr#L43","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should not be equal to '%{value}'\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_equal_to.cr#L36","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_equal_to.cr#L48","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@actual != @value"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/NotNil","path":"Assert/Assertions/NotNil.html","kind":"class","full_name":"Assert::Assertions::NotNil(PropertyType)","name":"NotNil","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/not_nil.cr","line_number":22,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_nil.cr#L22"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property is not `nil`.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::NotNil]\n  property nilable_int : Int32? = 17\n\n  @[Assert::NotNil]\n  property nilable_string : String? = \"Bob\"\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a property is not <code>nil</code>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_nil.cr#L23","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = NotNil(PropertyType).allocate\n_.initialize(property_name, actual, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_nil.cr#L28","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should not be null\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_nil.cr#L22","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/not_nil.cr#L33","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!@actual.nil?"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/RegexMatch","path":"Assert/Assertions/RegexMatch.html","kind":"class","full_name":"Assert::Assertions::RegexMatch(PropertyType)","name":"RegexMatch","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/regex_match.cr","line_number":29,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/regex_match.cr#L29"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property matches a `Regex` pattern.\n\n### Optional Arguments\n* *match* - Whether the string should have to match the pattern to be valid.\n* *normalizer* - Execute a `Proc` to alter *actual* before checking its validity.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::RegexMatch(pattern: /foo==bar/)]\n  property match : String? = \"foo==bar\"\n\n  @[Assert::RegexMatch(pattern: /foo==bar/, match: false)]\n  property not_match : String = \"foo--bar\"\n\n  @[Assert::RegexMatch(pattern: /^foo/, normalizer: ->(actual : String) { actual.strip })]\n  property normalizer : String = \" foo\"\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a property matches a <code>Regex</code> pattern.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:Union(String,Nil),pattern:Regex,match:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:Union(String,Nil),pattern:Regex,match:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"},{"name":"match","doc":null,"default_value":"true","external_name":"match","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : Union(String, Nil), pattern : Regex, match : Bool = <span class=\"n\">true</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/regex_match.cr#L30","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"},{"name":"match","doc":null,"default_value":"true","external_name":"match","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = RegexMatch(PropertyType).allocate\n_.initialize(property_name, actual, pattern, match, normalizer, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/regex_match.cr#L38","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' is not valid\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/regex_match.cr#L29","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/regex_match.cr#L43","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if actual = @actual\nelse\n  return true\nend\nmatched : Int32 | ::Nil = (((normalizer = @normalizer) ? normalizer.call(actual) : actual) =~ @pattern)\n@match ? !matched.nil? : matched.nil?\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/Register","path":"Assert/Assertions/Register.html","kind":"annotation","full_name":"Assert::Assertions::Register","name":"Register","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/assertion.cr","line_number":13,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertion.cr#L13"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Contains metadata associated with an `Assertion`.\n\nUsed to define the assertion's annotation.\n\n```\n@[Assert::Assertions::Register(annotation: Assert::MyAssertion)]\nclass MyAssertion(PropertyType) < Assert::Assertions::Assertion\nend\n```","summary":"<p>Contains metadata associated with an <code><a href=\"../../Assert/Assertions/Assertion.html\">Assertion</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/Size","path":"Assert/Assertions/Size.html","kind":"class","full_name":"Assert::Assertions::Size(PropertyType, RangeType)","name":"Size","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/size.cr","line_number":36,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/size.cr#L36"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a property's size is within a given `Range`.\n\n### Optional Arguments\n* *exact_message* - Message to display if *range*'s begin and end are the same and *actual* is not that value.\n* *min_message* - Message to display if *actual* is too small.\n* *max_message* - Message to display if *actual* is too big.\n* *normalizer* - Execute a `Proc` to alter *actual* before checking its validity.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::Size(Range(Float64, Float64), range: 2.0..3.0)]\n  property fav_numbers : Array(Int32) = [1, 2, 3]\n\n  @[Assert::Size(Range(Float64, Float64), range: 5.0..10.0, min_message: \"Password should be at least 5 characters\", max_message: \"Password cannot be more than 10 characters\")]\n  property password : String = \"monkey12\"\n\n  @[Assert::Size(Range(Int32, Int32), range: 5..5, exact_message: \"Value must be exactly 5 characters\")]\n  property exact_value : String = \"hello\"\n\n  @[Assert::Size(Range(Float64, Float64), range: 5.0..10.0, normalizer: ->(actual : String) { actual.strip })]\n  property normalizer : String = \"   crystal   \"\nend\n\nExample.new.valid? # => true\n```\nNOTE: `PropertyType` can be anything that implements `#size`.\nNOTE: The generic `RangeType` represents the type of *range*.","summary":"<p>Validates a property's size is within a given <code>Range</code>.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,range:RangeType,normalizer:Proc(PropertyType,PropertyType)?=nil,exact_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,range:RangeType,normalizer:Proc(PropertyType,PropertyType)?=nil,exact_message:String?=nil,min_message:String?=nil,max_message:String?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(PropertyType, PropertyType) | ::Nil"},{"name":"exact_message","doc":null,"default_value":"nil","external_name":"exact_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, range : RangeType, normalizer : Proc(PropertyType, PropertyType)? = <span class=\"n\">nil</span>, exact_message : String? = <span class=\"n\">nil</span>, min_message : String? = <span class=\"n\">nil</span>, max_message : String? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/size.cr#L37","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"RangeType"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(PropertyType, PropertyType) | ::Nil"},{"name":"exact_message","doc":null,"default_value":"nil","external_name":"exact_message","restriction":"String | ::Nil"},{"name":"min_message","doc":null,"default_value":"nil","external_name":"min_message","restriction":"String | ::Nil"},{"name":"max_message","doc":null,"default_value":"nil","external_name":"max_message","restriction":"String | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Size(PropertyType, RangeType).allocate\n_.initialize(property_name, actual, range, normalizer, exact_message, min_message, max_message, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/size.cr#L47","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' is not the correct size\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/size.cr#L36","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.\nameba:disable Metrics/CyclomaticComplexity","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/size.cr#L53","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (actual = (normalizer = @normalizer) ? normalizer.call(@actual) : @actual)\nelse\n  return true\nend\nif @range.includes?(actual.size)\n  return true\nend\n@message_template = if (@range.end == @range.begin) && (!(@range.includes?(actual.size)))\n  @exact_message || \"'%{property_name}' is not the proper size.  It should have exactly #{@range.end} #{actual.is_a?(String) ? \"character(s)\" : \"element(s)\"}\"\nelse\n  if @range.excludes_end? ? actual.size >= @range.end : actual.size > @range.end\n    @max_message || \"'%{property_name}' is too long.  It should have #{@range.end} #{actual.is_a?(String) ? \"character(s)\" : \"element(s)\"} or less\"\n  else\n    @min_message || \"'%{property_name}' is too short.  It should have #{@range.begin} #{actual.is_a?(String) ? \"character(s)\" : \"element(s)\"} or more\"\n  end\nend\nfalse\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/Url","path":"Assert/Assertions/Url.html","kind":"class","full_name":"Assert::Assertions::Url(PropertyType)","name":"Url","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/url.cr","line_number":33,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/url.cr#L33"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a string is a properly formatted URL.\n\n### Optional Arguments\n* *protocols* - The protocols considered to be valid.\n* *relative_protocol* - If the protocol is optional.\n* *normalizer* - Execute a `Proc` to alter *actual* before checking its validity.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::Url]\n  property ipv6_url : String = \"http://[::1]:80/\"\n\n  @[Assert::Url(relative_protocol: true)]\n  property relative_url : String = \"//example.fake/blog/\"\n\n  @[Assert::Url(protocols: %w(ftp file git))]\n  property file_url : String = \"file://127.0.0.1\"\n\n  @[Assert::Url(normalizer: ->(actual : String) { actual.strip })]\n  property normalizer : String = \"\\x09\\x09http://www.google.com\"\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a string is a properly formatted URL.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:Union(String,Nil),protocols:Array(String)=[&quot;http&quot;,&quot;https&quot;]of::String,relative_protocol:Bool=false,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:Union(String,Nil),protocols:Array(String)=[&quot;http&quot;,&quot;https&quot;]of::String,relative_protocol:Bool=false,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"protocols","doc":null,"default_value":"[\"http\", \"https\"] of ::String","external_name":"protocols","restriction":"Array(String)"},{"name":"relative_protocol","doc":null,"default_value":"false","external_name":"relative_protocol","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : Union(String, Nil), protocols : Array(String) = [<span class=\"s\">&quot;http&quot;</span>, <span class=\"s\">&quot;https&quot;</span>] <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">String</span>, relative_protocol : Bool = <span class=\"n\">false</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/url.cr#L34","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"protocols","doc":null,"default_value":"[\"http\", \"https\"] of ::String","external_name":"protocols","restriction":"Array(String)"},{"name":"relative_protocol","doc":null,"default_value":"false","external_name":"relative_protocol","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Url(PropertyType).allocate\n_.initialize(property_name, actual, protocols, relative_protocol, normalizer, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/url.cr#L42","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' is not a valid URL\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/url.cr#L33","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/url.cr#L47","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if actual = @actual\nelse\n  return true\nend\npattern = /^#{@relative_protocol ? \"(?:(#{@protocols.join('|')}):)?\" : \"(#{@protocols.join('|')}):\"}\\/\\/(([\\.\\pL\\pN-]+:)?([\\.\\pL\\pN-]+)@)?(([\\pL\\pN\\pS\\-\\.])+(\\.?([\\pL\\pN]|xn\\-\\-[\\pL\\pN-]+)+\\.?)|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\[(?:(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){6})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:::(?:(?:(?:[0-9a-f]{1,4})):){5})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:[0-9a-f]{1,4})))?::(?:(?:(?:[0-9a-f]{1,4})):){4})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,1}(?:(?:[0-9a-f]{1,4})))?::(?:(?:(?:[0-9a-f]{1,4})):){3})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,2}(?:(?:[0-9a-f]{1,4})))?::(?:(?:(?:[0-9a-f]{1,4})):){2})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,3}(?:(?:[0-9a-f]{1,4})))?::(?:(?:[0-9a-f]{1,4})):)(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,4}(?:(?:[0-9a-f]{1,4})))?::)(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,5}(?:(?:[0-9a-f]{1,4})))?::)(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,6}(?:(?:[0-9a-f]{1,4})))?::))))\\])(:[0-9]+)?(?:\\/ (?:[\\pL\\pN\\-._\\~!$&\\'()*+,;=:@]|\\%\\%[0-9A-Fa-f]{2})* )*(?:\\? (?:[\\pL\\pN\\-._\\~!$&\\'()*+,;=:@\\/?]|\\%\\%[0-9A-Fa-f]{2})* )?(?:\\# (?:[\\pL\\pN\\-._\\~!$&\\'()*+,;=:@\\/?]|\\%[0-9A-Fa-f]{2})* )?$/ix\n!(((normalizer = @normalizer) ? normalizer.call(actual) : actual) =~ pattern).nil?\n"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/Uuid","path":"Assert/Assertions/Uuid.html","kind":"class","full_name":"Assert::Assertions::Uuid(PropertyType)","name":"Uuid","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/uuid.cr","line_number":41,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/uuid.cr#L41"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HYPHEN_INDEXES","name":"HYPHEN_INDEXES","value":"{8, 13, 18, 23}","doc":"The indxes where a strict `UUID` should have a hyphen.","summary":"<p>The indxes where a strict <code>UUID</code> should have a hyphen.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates a string is a properly formatted [RFC4122 UUID](https://tools.ietf.org/html/rfc4122); either in hyphenated, hexstring, or urn formats.\n\n### Optional Arguments\n* *versions* - Only allow specific UUID versions.\n* *variants* - Only allow specific UUID variants.\n* *strict* - Only allow the hyphenated UUID format.\n* *normalizer* - Execute a `Proc` to alter *actual* before checking its validity.\n\n### Example\n```\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::Uuid(strict: false)]\n  property hyphenless : String = \"216fff4098d911e3a5e20800200c9a66\"\n\n  @[Assert::Uuid(strict: false)]\n  property urn : String = \"urn:uuid:3f9eaf9e-cdb0-45cc-8ecb-0e5b2bfb0c20\"\n\n  @[Assert::Uuid]\n  property strict : String = \"216fff40-98d9-11e3-a5e2-0800200c9a66\"\n\n  @[Assert::Uuid(versions: [UUID::Version::V1])]\n  property v1_only : String = \"216fff40-98d9-11e3-a5e2-0800200c9a66\"\n\n  @[Assert::Uuid(variants: [UUID::Variant::Future, UUID::Variant::NCS])]\n  property other_variants : String = \"216fff40-98d9-11e3-e5e2-0800200c9a66\"\n\n  @[Assert::Uuid(normalizer: ->(actual : String) { actual.strip })]\n  property normalizer : String = \"    216fff40-98d9-11e3-a5e2-0800200c9a66    \"\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates a string is a properly formatted <a href=\"https://tools.ietf.org/html/rfc4122\" target=\"_blank\">RFC4122 UUID</a>; either in hyphenated, hexstring, or urn formats.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:Union(String,Nil),versions:Array(UUID::Version)=[UUID::Version::V1,UUID::Version::V2,UUID::Version::V3,UUID::Version::V4,UUID::Version::V5],variants:Array(UUID::Variant)=[UUID::Variant::RFC4122],strict:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:Union(String,Nil),versions:Array(UUID::Version)=[UUID::Version::V1,UUID::Version::V2,UUID::Version::V3,UUID::Version::V4,UUID::Version::V5],variants:Array(UUID::Variant)=[UUID::Variant::RFC4122],strict:Bool=true,normalizer:Proc(String,String)?=nil,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"versions","doc":null,"default_value":"[UUID::Version::V1, UUID::Version::V2, UUID::Version::V3, UUID::Version::V4, UUID::Version::V5]","external_name":"versions","restriction":"Array(UUID::Version)"},{"name":"variants","doc":null,"default_value":"[UUID::Variant::RFC4122]","external_name":"variants","restriction":"Array(UUID::Variant)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : Union(String, Nil), versions : Array(UUID::Version) = [<span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V1</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V2</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V3</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V4</span>, <span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Version</span><span class=\"t\">::</span><span class=\"t\">V5</span>], variants : Array(UUID::Variant) = [<span class=\"t\">UUID</span><span class=\"t\">::</span><span class=\"t\">Variant</span><span class=\"t\">::</span><span class=\"t\">RFC4122</span>], strict : Bool = <span class=\"n\">true</span>, normalizer : Proc(String, String)? = <span class=\"n\">nil</span>, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/uuid.cr#L45","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"::Union(String, ::Nil)"},{"name":"versions","doc":null,"default_value":"[UUID::Version::V1, UUID::Version::V2, UUID::Version::V3, UUID::Version::V4, UUID::Version::V5]","external_name":"versions","restriction":"Array(UUID::Version)"},{"name":"variants","doc":null,"default_value":"[UUID::Variant::RFC4122]","external_name":"variants","restriction":"Array(UUID::Variant)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"normalizer","doc":null,"default_value":"nil","external_name":"normalizer","restriction":"Proc(String, String) | ::Nil"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Uuid(PropertyType).allocate\n_.initialize(property_name, actual, versions, variants, strict, normalizer, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/uuid.cr#L54","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' is not a valid UUID\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/uuid.cr#L41","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/uuid.cr#L59","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"begin\n  if actual = @actual\n  else\n    return true\n  end\n  actual = ((  normalizer = @normalizer) ? normalizer.call(actual) : actual)\n  if @strict && (!HYPHEN_INDEXES.all? do |idx|\n    (actual.char_at(idx)) == '-'\n  end)\n    return false\n  end\n  uuid : UUID = UUID.new(actual)\n  @variants.any? do |v|\n    v == uuid.variant\n  end && @versions.any? do |v|\n    v == uuid.version\n  end\nrescue e : ArgumentError\n  false\nend"}}],"macros":[],"types":[]},{"html_id":"assert/Assert/Assertions/Valid","path":"Assert/Assertions/Valid.html","kind":"class","full_name":"Assert::Assertions::Valid(PropertyType)","name":"Valid","abstract":false,"superclass":{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},"ancestors":[{"html_id":"assert/Assert/Assertions/Assertion","kind":"class","full_name":"Assert::Assertions::Assertion","name":"Assertion"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/assertions/valid.cr","line_number":34,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/valid.cr#L34"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Assertions","kind":"module","full_name":"Assert::Assertions","name":"Assertions"},"doc":"Validates child object(s) are valid; rendering the parent object invalid if any assertions on the child object(s) fail.\n\n### Example\n```\nclass Foo\n  include Assert\n\n  def initialize(@some_val : Int32); end\n\n  @[Assert::EqualTo(value: 50)]\n  property some_val : Int32\nend\n\nclass Example\n  include Assert\n\n  def initialize; end\n\n  @[Assert::EqualTo(value: 100)]\n  property int32 : Int32 = 100\n\n  @[Assert::Valid]\n  property foo : Foo = Foo.new(50)\n\n  @[Assert::Valid]\n  property foos : Array(Foo) = [Foo.new(50), Foo.new(50)]\nend\n\nExample.new.valid? # => true\n```","summary":"<p>Validates child object(s) are valid; rendering the parent object invalid if any assertions on the child object(s) fail.</p>","class_methods":[],"constructors":[{"id":"new(property_name:String,actual:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","html_id":"new(property_name:String,actual:PropertyType,message:String?=nil,groups:Array(String)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"args_string":"(property_name : String, actual : PropertyType, message : String? = <span class=\"n\">nil</span>, groups : Array(String)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/valid.cr#L35","def":{"name":"new","args":[{"name":"property_name","doc":null,"default_value":"","external_name":"property_name","restriction":"String"},{"name":"actual","doc":null,"default_value":"","external_name":"actual","restriction":"PropertyType"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"},{"name":"groups","doc":null,"default_value":"nil","external_name":"groups","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Valid(PropertyType).allocate\n_.initialize(property_name, actual, message, groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"default_message_template:String-instance-method","html_id":"default_message_template:String-instance-method","name":"default_message_template","doc":"Returns the default `#message_template` to use if no *message* is provided.","summary":"<p>Returns the default <code>#message_template</code> to use if no <em>message</em> is provided.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/valid.cr#L40","def":{"name":"default_message_template","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"'%{property_name}' should be valid\""}},{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":"The message to display if `self` is not valid.\n\nNOTE: This method is defined automatically, and is just present for documentation purposes.","summary":"<p>The message to display if <code>self</code> is not valid.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/valid.cr#L34","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@message || (@message = sprintf(@message_template, {% if true %}\n              {\n              {% for ivar in @type.instance_vars %}\n                {{ ivar.id }}: @{{ ivar }},\n              {% end %}\n              }\n            {% end %}))"}},{"id":"valid?:Bool-instance-method","html_id":"valid?:Bool-instance-method","name":"valid?","doc":"Returns `true` if a property satisfies `self`, otherwise `false`.","summary":"<p>Returns <code>true</code> if a property satisfies <code>self</code>, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/assertions/valid.cr#L45","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if actual = @actual\nelse\n  return true\nend\ncase actual\nwhen Array\n  actual.all?(&.valid?)\nwhen Assert\n  actual.valid?\nelse\n  true\nend\n"}}],"macros":[],"types":[]}]},{"html_id":"assert/Assert/Exceptions","path":"Assert/Exceptions.html","kind":"module","full_name":"Assert::Exceptions","name":"Exceptions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/exceptions/validation_error.cr","line_number":4,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/exceptions/validation_error.cr#L4"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert","kind":"module","full_name":"Assert","name":"Assert"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"assert/Assert/Exceptions/ValidationError","path":"Assert/Exceptions/ValidationError.html","kind":"class","full_name":"Assert::Exceptions::ValidationError","name":"ValidationError","abstract":false,"superclass":{"html_id":"assert/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"assert/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"assert/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"assert/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/exceptions/validation_error.cr","line_number":4,"url":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/exceptions/validation_error.cr#L4"}],"repository_name":"assert","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"assert/Assert/Exceptions","kind":"module","full_name":"Assert::Exceptions","name":"Exceptions"},"doc":"Represents a validation error.  It can be raised manually or via `Assert#validate!`.","summary":"<p>Represents a validation error.</p>","class_methods":[],"constructors":[{"id":"new(failed_assertion:Assert::Assertions::Assertion)-class-method","html_id":"new(failed_assertion:Assert::Assertions::Assertion)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"failed_assertion","doc":null,"default_value":"","external_name":"failed_assertion","restriction":"Assert::Assertions::Assertion"}],"args_string":"(failed_assertion : Assert::Assertions::Assertion)","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/exceptions/validation_error.cr#L5","def":{"name":"new","args":[{"name":"failed_assertion","doc":null,"default_value":"","external_name":"failed_assertion","restriction":"Assert::Assertions::Assertion"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new([failed_assertion] of Assert::Assertions::Assertion)"}},{"id":"new(failed_assertions:Array(Assert::Assertions::Assertion))-class-method","html_id":"new(failed_assertions:Array(Assert::Assertions::Assertion))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"failed_assertions","doc":null,"default_value":"","external_name":"failed_assertions","restriction":"Array(Assert::Assertions::Assertion)"}],"args_string":"(failed_assertions : Array(Assert::Assertions::Assertion))","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/exceptions/validation_error.cr#L9","def":{"name":"new","args":[{"name":"failed_assertions","doc":null,"default_value":"","external_name":"failed_assertions","restriction":"Array(Assert::Assertions::Assertion)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(failed_assertions)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"to_json(builder:JSON::Builder):Nil-instance-method","html_id":"to_json(builder:JSON::Builder):Nil-instance-method","name":"to_json","doc":"Returns a JSON/pretty JSON object for `self`.\n\nCan be overwritten to change the JSON schema.\n```\nerror = Assert::Exceptions::ValidationError.new([\n  Assert::Assertions::NotBlank(String?).new(\"name\", \"\"),\n  Assert::Assertions::GreaterThanOrEqual(Int32).new(\"age\", -1, 0),\n])\n\nerror.to_pretty_json # =>\n{\n  \"code\":    400,\n  \"message\": \"Validation tests failed\",\n  \"errors\":  [\n    \"'name' should not be blank\",\n    \"'age' should be greater than or equal to '0'\",\n  ],\n}\n```","summary":"<p>Returns a JSON/pretty JSON object for <code>self</code>.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder) : Nil","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/exceptions/validation_error.cr#L32","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"builder.object do\n  builder.field(\"code\", 400)\n  builder.field(\"message\", @message)\n  builder.field(\"errors\", @failed_assertions.map(&.message))\nend"}},{"id":"to_s:String-instance-method","html_id":"to_s:String-instance-method","name":"to_s","doc":"Returns failed validations as a string.\n\n```\nerror = Assert::Exceptions::ValidationError.new([\n  Assert::Assertions::NotBlank(String?).new(\"name\", \"\"),\n  Assert::Assertions::GreaterThanOrEqual(Int32).new(\"age\", -1, 0),\n])\n\nerror.to_s # => \"Validation tests failed: 'name' should not be blank, 'age' should be greater than or equal to '0'\"\n```","summary":"<p>Returns failed validations as a string.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/Blacksmoke16/assert/blob/d6392af2409fba5146f3193c703dc3a8086aa937/src/exceptions/validation_error.cr#L50","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |str|\n  str << \"Validation tests failed: \"\n  @failed_assertions.map(&.message).join(str, \", \")\nend"}}],"macros":[],"types":[]}]}]}]}})